{"ast":null,"code":"'use strict';\n\n/**\n * Module dependencies.\n */\nconst contentDisposition = require('content-disposition');\nconst getType = require('cache-content-type');\nconst onFinish = require('on-finished');\nconst escape = require('escape-html');\nconst typeis = require('type-is').is;\nconst statuses = require('statuses');\nconst destroy = require('destroy');\nconst assert = require('assert');\nconst extname = require('path').extname;\nconst vary = require('vary');\nconst only = require('only');\nconst util = require('util');\nconst encodeUrl = require('encodeurl');\nconst Stream = require('stream');\nconst URL = require('url').URL;\n\n/**\n * Prototype.\n */\n\nmodule.exports = {\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n\n  get socket() {\n    return this.res.socket;\n  },\n  /**\n   * Return response header.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get header() {\n    const {\n      res\n    } = this;\n    return typeof res.getHeaders === 'function' ? res.getHeaders() : res._headers || {}; // Node < 7.7\n  },\n  /**\n   * Return response header, alias as response.header\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get headers() {\n    return this.header;\n  },\n  /**\n   * Get response status code.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get status() {\n    return this.res.statusCode;\n  },\n  /**\n   * Set response status code.\n   *\n   * @param {Number} code\n   * @api public\n   */\n\n  set status(code) {\n    if (this.headerSent) return;\n    assert(Number.isInteger(code), 'status code must be a number');\n    assert(code >= 100 && code <= 999, `invalid status code: ${code}`);\n    this._explicitStatus = true;\n    this.res.statusCode = code;\n    if (this.req.httpVersionMajor < 2) this.res.statusMessage = statuses[code];\n    if (this.body && statuses.empty[code]) this.body = null;\n  },\n  /**\n   * Get response status message\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get message() {\n    return this.res.statusMessage || statuses[this.status];\n  },\n  /**\n   * Set response status message\n   *\n   * @param {String} msg\n   * @api public\n   */\n\n  set message(msg) {\n    this.res.statusMessage = msg;\n  },\n  /**\n   * Get response body.\n   *\n   * @return {Mixed}\n   * @api public\n   */\n\n  get body() {\n    return this._body;\n  },\n  /**\n   * Set response body.\n   *\n   * @param {String|Buffer|Object|Stream} val\n   * @api public\n   */\n\n  set body(val) {\n    const original = this._body;\n    this._body = val;\n\n    // no content\n    if (null == val) {\n      if (!statuses.empty[this.status]) this.status = 204;\n      if (val === null) this._explicitNullBody = true;\n      this.remove('Content-Type');\n      this.remove('Content-Length');\n      this.remove('Transfer-Encoding');\n      return;\n    }\n\n    // set the status\n    if (!this._explicitStatus) this.status = 200;\n\n    // set the content-type only if not yet set\n    const setType = !this.has('Content-Type');\n\n    // string\n    if ('string' === typeof val) {\n      if (setType) this.type = /^\\s*</.test(val) ? 'html' : 'text';\n      this.length = Buffer.byteLength(val);\n      return;\n    }\n\n    // buffer\n    if (Buffer.isBuffer(val)) {\n      if (setType) this.type = 'bin';\n      this.length = val.length;\n      return;\n    }\n\n    // stream\n    if (val instanceof Stream) {\n      onFinish(this.res, destroy.bind(null, val));\n      if (original != val) {\n        val.once('error', err => this.ctx.onerror(err));\n        // overwriting\n        if (null != original) this.remove('Content-Length');\n      }\n      if (setType) this.type = 'bin';\n      return;\n    }\n\n    // json\n    this.remove('Content-Length');\n    this.type = 'json';\n  },\n  /**\n   * Set Content-Length field to `n`.\n   *\n   * @param {Number} n\n   * @api public\n   */\n\n  set length(n) {\n    if (!this.has('Transfer-Encoding')) {\n      this.set('Content-Length', n);\n    }\n  },\n  /**\n   * Return parsed response Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    if (this.has('Content-Length')) {\n      return parseInt(this.get('Content-Length'), 10) || 0;\n    }\n    const {\n      body\n    } = this;\n    if (!body || body instanceof Stream) return undefined;\n    if ('string' === typeof body) return Buffer.byteLength(body);\n    if (Buffer.isBuffer(body)) return body.length;\n    return Buffer.byteLength(JSON.stringify(body));\n  },\n  /**\n   * Check if a header has been written to the socket.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get headerSent() {\n    return this.res.headersSent;\n  },\n  /**\n   * Vary on `field`.\n   *\n   * @param {String} field\n   * @api public\n   */\n\n  vary(field) {\n    if (this.headerSent) return;\n    vary(this.res, field);\n  },\n  /**\n   * Perform a 302 redirect to `url`.\n   *\n   * The string \"back\" is special-cased\n   * to provide Referrer support, when Referrer\n   * is not present `alt` or \"/\" is used.\n   *\n   * Examples:\n   *\n   *    this.redirect('back');\n   *    this.redirect('back', '/index.html');\n   *    this.redirect('/login');\n   *    this.redirect('http://google.com');\n   *\n   * @param {String} url\n   * @param {String} [alt]\n   * @api public\n   */\n\n  redirect(url, alt) {\n    // location\n    if ('back' === url) url = this.ctx.get('Referrer') || alt || '/';\n    if (/^https?:\\/\\//i.test(url)) {\n      // formatting url again avoid security escapes\n      url = new URL(url).toString();\n    }\n    this.set('Location', encodeUrl(url));\n\n    // status\n    if (!statuses.redirect[this.status]) this.status = 302;\n\n    // html\n    if (this.ctx.accepts('html')) {\n      url = escape(url);\n      this.type = 'text/html; charset=utf-8';\n      this.body = `Redirecting to <a href=\"${url}\">${url}</a>.`;\n      return;\n    }\n\n    // text\n    this.type = 'text/plain; charset=utf-8';\n    this.body = `Redirecting to ${url}.`;\n  },\n  /**\n   * Set Content-Disposition header to \"attachment\" with optional `filename`.\n   *\n   * @param {String} filename\n   * @api public\n   */\n\n  attachment(filename, options) {\n    if (filename) this.type = extname(filename);\n    this.set('Content-Disposition', contentDisposition(filename, options));\n  },\n  /**\n   * Set Content-Type response header with `type` through `mime.lookup()`\n   * when it does not contain a charset.\n   *\n   * Examples:\n   *\n   *     this.type = '.html';\n   *     this.type = 'html';\n   *     this.type = 'json';\n   *     this.type = 'application/json';\n   *     this.type = 'png';\n   *\n   * @param {String} type\n   * @api public\n   */\n\n  set type(type) {\n    type = getType(type);\n    if (type) {\n      this.set('Content-Type', type);\n    } else {\n      this.remove('Content-Type');\n    }\n  },\n  /**\n   * Set the Last-Modified date using a string or a Date.\n   *\n   *     this.response.lastModified = new Date();\n   *     this.response.lastModified = '2013-09-13';\n   *\n   * @param {String|Date} type\n   * @api public\n   */\n\n  set lastModified(val) {\n    if ('string' === typeof val) val = new Date(val);\n    this.set('Last-Modified', val.toUTCString());\n  },\n  /**\n   * Get the Last-Modified date in Date form, if it exists.\n   *\n   * @return {Date}\n   * @api public\n   */\n\n  get lastModified() {\n    const date = this.get('last-modified');\n    if (date) return new Date(date);\n  },\n  /**\n   * Set the ETag of a response.\n   * This will normalize the quotes if necessary.\n   *\n   *     this.response.etag = 'md5hashsum';\n   *     this.response.etag = '\"md5hashsum\"';\n   *     this.response.etag = 'W/\"123456789\"';\n   *\n   * @param {String} etag\n   * @api public\n   */\n\n  set etag(val) {\n    if (!/^(W\\/)?\"/.test(val)) val = `\"${val}\"`;\n    this.set('ETag', val);\n  },\n  /**\n   * Get the ETag of a response.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get etag() {\n    return this.get('ETag');\n  },\n  /**\n   * Return the response mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';', 1)[0];\n  },\n  /**\n   * Check whether the response is one of the listed types.\n   * Pretty much the same as `this.request.is()`.\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false}\n   * @api public\n   */\n\n  is(type, ...types) {\n    return typeis(this.type, type, ...types);\n  },\n  /**\n   * Return response header.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n\n  get(field) {\n    return this.header[field.toLowerCase()] || '';\n  },\n  /**\n   * Returns true if the header identified by name is currently set in the outgoing headers.\n   * The header name matching is case-insensitive.\n   *\n   * Examples:\n   *\n   *     this.has('Content-Type');\n   *     // => true\n   *\n   *     this.get('content-type');\n   *     // => true\n   *\n   * @param {String} field\n   * @return {boolean}\n   * @api public\n   */\n\n  has(field) {\n    return typeof this.res.hasHeader === 'function' ? this.res.hasHeader(field)\n    // Node < 7.7\n    : field.toLowerCase() in this.headers;\n  },\n  /**\n   * Set header `field` to `val` or pass\n   * an object of header fields.\n   *\n   * Examples:\n   *\n   *    this.set('Foo', ['bar', 'baz']);\n   *    this.set('Accept', 'application/json');\n   *    this.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   *\n   * @param {String|Object|Array} field\n   * @param {String} val\n   * @api public\n   */\n\n  set(field, val) {\n    if (this.headerSent) return;\n    if (2 === arguments.length) {\n      if (Array.isArray(val)) val = val.map(v => typeof v === 'string' ? v : String(v));else if (typeof val !== 'string') val = String(val);\n      this.res.setHeader(field, val);\n    } else {\n      for (const key in field) {\n        this.set(key, field[key]);\n      }\n    }\n  },\n  /**\n   * Append additional header `field` with value `val`.\n   *\n   * Examples:\n   *\n   * ```\n   * this.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);\n   * this.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');\n   * this.append('Warning', '199 Miscellaneous warning');\n   * ```\n   *\n   * @param {String} field\n   * @param {String|Array} val\n   * @api public\n   */\n\n  append(field, val) {\n    const prev = this.get(field);\n    if (prev) {\n      val = Array.isArray(prev) ? prev.concat(val) : [prev].concat(val);\n    }\n    return this.set(field, val);\n  },\n  /**\n   * Remove header `field`.\n   *\n   * @param {String} name\n   * @api public\n   */\n\n  remove(field) {\n    if (this.headerSent) return;\n    this.res.removeHeader(field);\n  },\n  /**\n   * Checks if the request is writable.\n   * Tests for the existence of the socket\n   * as node sometimes does not set it.\n   *\n   * @return {Boolean}\n   * @api private\n   */\n\n  get writable() {\n    // can't write any more after response finished\n    // response.writableEnded is available since Node > 12.9\n    // https://nodejs.org/api/http.html#http_response_writableended\n    // response.finished is undocumented feature of previous Node versions\n    // https://stackoverflow.com/questions/16254385/undocumented-response-finished-in-node-js\n    if (this.res.writableEnded || this.res.finished) return false;\n    const socket = this.res.socket;\n    // There are already pending outgoing res, but still writable\n    // https://github.com/nodejs/node/blob/v4.4.7/lib/_http_server.js#L486\n    if (!socket) return true;\n    return socket.writable;\n  },\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  inspect() {\n    if (!this.res) return;\n    const o = this.toJSON();\n    o.body = this.body;\n    return o;\n  },\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    return only(this, ['status', 'message', 'header']);\n  },\n  /**\n   * Flush any set headers and begin the body\n   */\n\n  flushHeaders() {\n    this.res.flushHeaders();\n  }\n};\n\n/**\n * Custom inspection implementation for node 6+.\n *\n * @return {Object}\n * @api public\n */\n\n/* istanbul ignore else */\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}","map":{"version":3,"names":["contentDisposition","require","getType","onFinish","escape","typeis","is","statuses","destroy","assert","extname","vary","only","util","encodeUrl","Stream","URL","module","exports","socket","res","header","getHeaders","_headers","headers","status","statusCode","code","headerSent","Number","isInteger","_explicitStatus","req","httpVersionMajor","statusMessage","body","empty","message","msg","_body","val","original","_explicitNullBody","remove","setType","has","type","test","length","Buffer","byteLength","isBuffer","bind","once","err","ctx","onerror","n","set","parseInt","get","undefined","JSON","stringify","headersSent","field","redirect","url","alt","toString","accepts","attachment","filename","options","lastModified","Date","toUTCString","date","etag","split","types","toLowerCase","hasHeader","arguments","Array","isArray","map","v","String","setHeader","key","append","prev","concat","removeHeader","writable","writableEnded","finished","inspect","o","toJSON","flushHeaders","custom"],"sources":["C:/Users/ytBad/OneDrive/바탕 화면/all/project/my-app/node_modules/koa/lib/response.js"],"sourcesContent":["\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst contentDisposition = require('content-disposition');\nconst getType = require('cache-content-type');\nconst onFinish = require('on-finished');\nconst escape = require('escape-html');\nconst typeis = require('type-is').is;\nconst statuses = require('statuses');\nconst destroy = require('destroy');\nconst assert = require('assert');\nconst extname = require('path').extname;\nconst vary = require('vary');\nconst only = require('only');\nconst util = require('util');\nconst encodeUrl = require('encodeurl');\nconst Stream = require('stream');\nconst URL = require('url').URL;\n\n/**\n * Prototype.\n */\n\nmodule.exports = {\n\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n\n  get socket() {\n    return this.res.socket;\n  },\n\n  /**\n   * Return response header.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get header() {\n    const { res } = this;\n    return typeof res.getHeaders === 'function'\n      ? res.getHeaders()\n      : res._headers || {}; // Node < 7.7\n  },\n\n  /**\n   * Return response header, alias as response.header\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get headers() {\n    return this.header;\n  },\n\n  /**\n   * Get response status code.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get status() {\n    return this.res.statusCode;\n  },\n\n  /**\n   * Set response status code.\n   *\n   * @param {Number} code\n   * @api public\n   */\n\n  set status(code) {\n    if (this.headerSent) return;\n\n    assert(Number.isInteger(code), 'status code must be a number');\n    assert(code >= 100 && code <= 999, `invalid status code: ${code}`);\n    this._explicitStatus = true;\n    this.res.statusCode = code;\n    if (this.req.httpVersionMajor < 2) this.res.statusMessage = statuses[code];\n    if (this.body && statuses.empty[code]) this.body = null;\n  },\n\n  /**\n   * Get response status message\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get message() {\n    return this.res.statusMessage || statuses[this.status];\n  },\n\n  /**\n   * Set response status message\n   *\n   * @param {String} msg\n   * @api public\n   */\n\n  set message(msg) {\n    this.res.statusMessage = msg;\n  },\n\n  /**\n   * Get response body.\n   *\n   * @return {Mixed}\n   * @api public\n   */\n\n  get body() {\n    return this._body;\n  },\n\n  /**\n   * Set response body.\n   *\n   * @param {String|Buffer|Object|Stream} val\n   * @api public\n   */\n\n  set body(val) {\n    const original = this._body;\n    this._body = val;\n\n    // no content\n    if (null == val) {\n      if (!statuses.empty[this.status]) this.status = 204;\n      if (val === null) this._explicitNullBody = true;\n      this.remove('Content-Type');\n      this.remove('Content-Length');\n      this.remove('Transfer-Encoding');\n      return;\n    }\n\n    // set the status\n    if (!this._explicitStatus) this.status = 200;\n\n    // set the content-type only if not yet set\n    const setType = !this.has('Content-Type');\n\n    // string\n    if ('string' === typeof val) {\n      if (setType) this.type = /^\\s*</.test(val) ? 'html' : 'text';\n      this.length = Buffer.byteLength(val);\n      return;\n    }\n\n    // buffer\n    if (Buffer.isBuffer(val)) {\n      if (setType) this.type = 'bin';\n      this.length = val.length;\n      return;\n    }\n\n    // stream\n    if (val instanceof Stream) {\n      onFinish(this.res, destroy.bind(null, val));\n      if (original != val) {\n        val.once('error', err => this.ctx.onerror(err));\n        // overwriting\n        if (null != original) this.remove('Content-Length');\n      }\n\n      if (setType) this.type = 'bin';\n      return;\n    }\n\n    // json\n    this.remove('Content-Length');\n    this.type = 'json';\n  },\n\n  /**\n   * Set Content-Length field to `n`.\n   *\n   * @param {Number} n\n   * @api public\n   */\n\n  set length(n) {\n    if (!this.has('Transfer-Encoding')) {\n      this.set('Content-Length', n);\n    }\n  },\n\n  /**\n   * Return parsed response Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    if (this.has('Content-Length')) {\n      return parseInt(this.get('Content-Length'), 10) || 0;\n    }\n\n    const { body } = this;\n    if (!body || body instanceof Stream) return undefined;\n    if ('string' === typeof body) return Buffer.byteLength(body);\n    if (Buffer.isBuffer(body)) return body.length;\n    return Buffer.byteLength(JSON.stringify(body));\n  },\n\n  /**\n   * Check if a header has been written to the socket.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get headerSent() {\n    return this.res.headersSent;\n  },\n\n  /**\n   * Vary on `field`.\n   *\n   * @param {String} field\n   * @api public\n   */\n\n  vary(field) {\n    if (this.headerSent) return;\n\n    vary(this.res, field);\n  },\n\n  /**\n   * Perform a 302 redirect to `url`.\n   *\n   * The string \"back\" is special-cased\n   * to provide Referrer support, when Referrer\n   * is not present `alt` or \"/\" is used.\n   *\n   * Examples:\n   *\n   *    this.redirect('back');\n   *    this.redirect('back', '/index.html');\n   *    this.redirect('/login');\n   *    this.redirect('http://google.com');\n   *\n   * @param {String} url\n   * @param {String} [alt]\n   * @api public\n   */\n\n  redirect(url, alt) {\n    // location\n    if ('back' === url) url = this.ctx.get('Referrer') || alt || '/';\n    if (/^https?:\\/\\//i.test(url)) {\n      // formatting url again avoid security escapes\n      url = new URL(url).toString();\n    }\n    this.set('Location', encodeUrl(url));\n\n    // status\n    if (!statuses.redirect[this.status]) this.status = 302;\n\n    // html\n    if (this.ctx.accepts('html')) {\n      url = escape(url);\n      this.type = 'text/html; charset=utf-8';\n      this.body = `Redirecting to <a href=\"${url}\">${url}</a>.`;\n      return;\n    }\n\n    // text\n    this.type = 'text/plain; charset=utf-8';\n    this.body = `Redirecting to ${url}.`;\n  },\n\n  /**\n   * Set Content-Disposition header to \"attachment\" with optional `filename`.\n   *\n   * @param {String} filename\n   * @api public\n   */\n\n  attachment(filename, options) {\n    if (filename) this.type = extname(filename);\n    this.set('Content-Disposition', contentDisposition(filename, options));\n  },\n\n  /**\n   * Set Content-Type response header with `type` through `mime.lookup()`\n   * when it does not contain a charset.\n   *\n   * Examples:\n   *\n   *     this.type = '.html';\n   *     this.type = 'html';\n   *     this.type = 'json';\n   *     this.type = 'application/json';\n   *     this.type = 'png';\n   *\n   * @param {String} type\n   * @api public\n   */\n\n  set type(type) {\n    type = getType(type);\n    if (type) {\n      this.set('Content-Type', type);\n    } else {\n      this.remove('Content-Type');\n    }\n  },\n\n  /**\n   * Set the Last-Modified date using a string or a Date.\n   *\n   *     this.response.lastModified = new Date();\n   *     this.response.lastModified = '2013-09-13';\n   *\n   * @param {String|Date} type\n   * @api public\n   */\n\n  set lastModified(val) {\n    if ('string' === typeof val) val = new Date(val);\n    this.set('Last-Modified', val.toUTCString());\n  },\n\n  /**\n   * Get the Last-Modified date in Date form, if it exists.\n   *\n   * @return {Date}\n   * @api public\n   */\n\n  get lastModified() {\n    const date = this.get('last-modified');\n    if (date) return new Date(date);\n  },\n\n  /**\n   * Set the ETag of a response.\n   * This will normalize the quotes if necessary.\n   *\n   *     this.response.etag = 'md5hashsum';\n   *     this.response.etag = '\"md5hashsum\"';\n   *     this.response.etag = 'W/\"123456789\"';\n   *\n   * @param {String} etag\n   * @api public\n   */\n\n  set etag(val) {\n    if (!/^(W\\/)?\"/.test(val)) val = `\"${val}\"`;\n    this.set('ETag', val);\n  },\n\n  /**\n   * Get the ETag of a response.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get etag() {\n    return this.get('ETag');\n  },\n\n  /**\n   * Return the response mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';', 1)[0];\n  },\n\n  /**\n   * Check whether the response is one of the listed types.\n   * Pretty much the same as `this.request.is()`.\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false}\n   * @api public\n   */\n\n  is(type, ...types) {\n    return typeis(this.type, type, ...types);\n  },\n\n  /**\n   * Return response header.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n\n  get(field) {\n    return this.header[field.toLowerCase()] || '';\n  },\n\n  /**\n   * Returns true if the header identified by name is currently set in the outgoing headers.\n   * The header name matching is case-insensitive.\n   *\n   * Examples:\n   *\n   *     this.has('Content-Type');\n   *     // => true\n   *\n   *     this.get('content-type');\n   *     // => true\n   *\n   * @param {String} field\n   * @return {boolean}\n   * @api public\n   */\n\n  has(field) {\n    return typeof this.res.hasHeader === 'function'\n      ? this.res.hasHeader(field)\n      // Node < 7.7\n      : field.toLowerCase() in this.headers;\n  },\n\n  /**\n   * Set header `field` to `val` or pass\n   * an object of header fields.\n   *\n   * Examples:\n   *\n   *    this.set('Foo', ['bar', 'baz']);\n   *    this.set('Accept', 'application/json');\n   *    this.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   *\n   * @param {String|Object|Array} field\n   * @param {String} val\n   * @api public\n   */\n\n  set(field, val) {\n    if (this.headerSent) return;\n\n    if (2 === arguments.length) {\n      if (Array.isArray(val)) val = val.map(v => typeof v === 'string' ? v : String(v));\n      else if (typeof val !== 'string') val = String(val);\n      this.res.setHeader(field, val);\n    } else {\n      for (const key in field) {\n        this.set(key, field[key]);\n      }\n    }\n  },\n\n  /**\n   * Append additional header `field` with value `val`.\n   *\n   * Examples:\n   *\n   * ```\n   * this.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);\n   * this.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');\n   * this.append('Warning', '199 Miscellaneous warning');\n   * ```\n   *\n   * @param {String} field\n   * @param {String|Array} val\n   * @api public\n   */\n\n  append(field, val) {\n    const prev = this.get(field);\n\n    if (prev) {\n      val = Array.isArray(prev)\n        ? prev.concat(val)\n        : [prev].concat(val);\n    }\n\n    return this.set(field, val);\n  },\n\n  /**\n   * Remove header `field`.\n   *\n   * @param {String} name\n   * @api public\n   */\n\n  remove(field) {\n    if (this.headerSent) return;\n\n    this.res.removeHeader(field);\n  },\n\n  /**\n   * Checks if the request is writable.\n   * Tests for the existence of the socket\n   * as node sometimes does not set it.\n   *\n   * @return {Boolean}\n   * @api private\n   */\n\n  get writable() {\n    // can't write any more after response finished\n    // response.writableEnded is available since Node > 12.9\n    // https://nodejs.org/api/http.html#http_response_writableended\n    // response.finished is undocumented feature of previous Node versions\n    // https://stackoverflow.com/questions/16254385/undocumented-response-finished-in-node-js\n    if (this.res.writableEnded || this.res.finished) return false;\n\n    const socket = this.res.socket;\n    // There are already pending outgoing res, but still writable\n    // https://github.com/nodejs/node/blob/v4.4.7/lib/_http_server.js#L486\n    if (!socket) return true;\n    return socket.writable;\n  },\n\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  inspect() {\n    if (!this.res) return;\n    const o = this.toJSON();\n    o.body = this.body;\n    return o;\n  },\n\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    return only(this, [\n      'status',\n      'message',\n      'header'\n    ]);\n  },\n\n  /**\n   * Flush any set headers and begin the body\n   */\n\n  flushHeaders() {\n    this.res.flushHeaders();\n  }\n};\n\n/**\n * Custom inspection implementation for node 6+.\n *\n * @return {Object}\n * @api public\n */\n\n/* istanbul ignore else */\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nconst parse = require('co-body');\nconst copy = require('copy-to');\nconst typeis = require('type-is');\n\n/**\n * @param [Object] opts\n *   - {String} jsonLimit default '1mb'\n *   - {String} formLimit default '56kb'\n *   - {string} encoding default 'utf-8'\n *   - {Object} extendTypes\n */\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n  const {\n    detectJSON\n  } = opts;\n  const {\n    onerror\n  } = opts;\n  const enableTypes = opts.enableTypes || ['json', 'form'];\n  const enableForm = checkEnable(enableTypes, 'form');\n  const enableJson = checkEnable(enableTypes, 'json');\n  const enableText = checkEnable(enableTypes, 'text');\n  const enableXml = checkEnable(enableTypes, 'xml');\n  opts.detectJSON = undefined;\n  opts.onerror = undefined; // eslint-disable-line unicorn/prefer-add-event-listener\n\n  // force co-body return raw body\n  opts.returnRawBody = true;\n\n  // default json types\n  const jsonTypes = ['application/json', 'application/json-patch+json', 'application/vnd.api+json', 'application/csp-report', 'application/scim+json'];\n\n  // default form types\n  const formTypes = ['application/x-www-form-urlencoded'];\n\n  // default text types\n  const textTypes = ['text/plain'];\n\n  // default xml types\n  const xmlTypes = ['text/xml', 'application/xml'];\n  const jsonOpts = formatOptions(opts, 'json');\n  const formOpts = formatOptions(opts, 'form');\n  const textOpts = formatOptions(opts, 'text');\n  const xmlOpts = formatOptions(opts, 'xml');\n  const extendTypes = opts.extendTypes || {};\n  extendType(jsonTypes, extendTypes.json);\n  extendType(formTypes, extendTypes.form);\n  extendType(textTypes, extendTypes.text);\n  extendType(xmlTypes, extendTypes.xml);\n\n  // eslint-disable-next-line func-names\n  return async function bodyParser(ctx, next) {\n    if (ctx.request.body !== undefined || ctx.disableBodyParser) return await next(); // eslint-disable-line no-return-await\n    try {\n      const res = await parseBody(ctx);\n      ctx.request.body = 'parsed' in res ? res.parsed : {};\n      if (ctx.request.rawBody === undefined) ctx.request.rawBody = res.raw;\n    } catch (err) {\n      if (onerror) {\n        onerror(err, ctx);\n      } else {\n        throw err;\n      }\n    }\n    await next();\n  };\n  async function parseBody(ctx) {\n    if (enableJson && (detectJSON && detectJSON(ctx) || isTypes(ctx.request.get('content-type'), jsonTypes))) {\n      return await parse.json(ctx, jsonOpts); // eslint-disable-line no-return-await\n    }\n    if (enableForm && ctx.request.is(formTypes)) {\n      return await parse.form(ctx, formOpts); // eslint-disable-line no-return-await\n    }\n    if (enableText && ctx.request.is(textTypes)) {\n      return (await parse.text(ctx, textOpts)) || '';\n    }\n    if (enableXml && ctx.request.is(xmlTypes)) {\n      return (await parse.text(ctx, xmlOpts)) || '';\n    }\n    return {};\n  }\n};\nfunction formatOptions(opts, type) {\n  const res = {};\n  copy(opts).to(res);\n  res.limit = opts[type + 'Limit'];\n  return res;\n}\nfunction extendType(original, extend) {\n  if (extend) {\n    if (!Array.isArray(extend)) {\n      extend = [extend];\n    }\n    extend.forEach(function (extend) {\n      original.push(extend);\n    });\n  }\n}\nfunction checkEnable(types, type) {\n  return types.includes(type);\n}\nfunction isTypes(contentTypeValue, types) {\n  if (typeof contentTypeValue === 'string') {\n    // trim extra semicolon\n    contentTypeValue = contentTypeValue.replace(/;$/, '');\n  }\n  return typeis.is(contentTypeValue, types);\n}","map":{"version":3,"names":["parse","require","copy","typeis","module","exports","opts","detectJSON","onerror","enableTypes","enableForm","checkEnable","enableJson","enableText","enableXml","undefined","returnRawBody","jsonTypes","formTypes","textTypes","xmlTypes","jsonOpts","formatOptions","formOpts","textOpts","xmlOpts","extendTypes","extendType","json","form","text","xml","bodyParser","ctx","next","request","body","disableBodyParser","res","parseBody","parsed","rawBody","raw","err","isTypes","get","is","type","to","limit","original","extend","Array","isArray","forEach","push","types","includes","contentTypeValue","replace"],"sources":["C:/Users/ytBad/OneDrive/바탕 화면/all/project/my-app/node_modules/koa-bodyparser/index.js"],"sourcesContent":["'use strict';\n\nconst parse = require('co-body');\nconst copy = require('copy-to');\nconst typeis = require('type-is');\n\n/**\n * @param [Object] opts\n *   - {String} jsonLimit default '1mb'\n *   - {String} formLimit default '56kb'\n *   - {string} encoding default 'utf-8'\n *   - {Object} extendTypes\n */\n\nmodule.exports = function(opts) {\n  opts = opts || {};\n  const {detectJSON} = opts;\n  const {onerror} = opts;\n\n  const enableTypes = opts.enableTypes || ['json', 'form'];\n  const enableForm = checkEnable(enableTypes, 'form');\n  const enableJson = checkEnable(enableTypes, 'json');\n  const enableText = checkEnable(enableTypes, 'text');\n  const enableXml = checkEnable(enableTypes, 'xml');\n\n  opts.detectJSON = undefined;\n  opts.onerror = undefined; // eslint-disable-line unicorn/prefer-add-event-listener\n\n  // force co-body return raw body\n  opts.returnRawBody = true;\n\n  // default json types\n  const jsonTypes = [\n    'application/json',\n    'application/json-patch+json',\n    'application/vnd.api+json',\n    'application/csp-report',\n    'application/scim+json'\n  ];\n\n  // default form types\n  const formTypes = ['application/x-www-form-urlencoded'];\n\n  // default text types\n  const textTypes = ['text/plain'];\n\n  // default xml types\n  const xmlTypes = ['text/xml', 'application/xml'];\n\n  const jsonOpts = formatOptions(opts, 'json');\n  const formOpts = formatOptions(opts, 'form');\n  const textOpts = formatOptions(opts, 'text');\n  const xmlOpts = formatOptions(opts, 'xml');\n\n  const extendTypes = opts.extendTypes || {};\n\n  extendType(jsonTypes, extendTypes.json);\n  extendType(formTypes, extendTypes.form);\n  extendType(textTypes, extendTypes.text);\n  extendType(xmlTypes, extendTypes.xml);\n\n  // eslint-disable-next-line func-names\n  return async function bodyParser(ctx, next) {\n    if (ctx.request.body !== undefined || ctx.disableBodyParser)\n      return await next(); // eslint-disable-line no-return-await\n    try {\n      const res = await parseBody(ctx);\n      ctx.request.body = 'parsed' in res ? res.parsed : {};\n      if (ctx.request.rawBody === undefined) ctx.request.rawBody = res.raw;\n    } catch (err) {\n      if (onerror) {\n        onerror(err, ctx);\n      } else {\n        throw err;\n      }\n    }\n\n    await next();\n  };\n\n  async function parseBody(ctx) {\n    if (\n      enableJson &&\n      ((detectJSON && detectJSON(ctx)) ||\n        isTypes(ctx.request.get('content-type'), jsonTypes))\n    ) {\n      return await parse.json(ctx, jsonOpts); // eslint-disable-line no-return-await\n    }\n\n    if (enableForm && ctx.request.is(formTypes)) {\n      return await parse.form(ctx, formOpts); // eslint-disable-line no-return-await\n    }\n\n    if (enableText && ctx.request.is(textTypes)) {\n      return (await parse.text(ctx, textOpts)) || '';\n    }\n\n    if (enableXml && ctx.request.is(xmlTypes)) {\n      return (await parse.text(ctx, xmlOpts)) || '';\n    }\n\n    return {};\n  }\n};\n\nfunction formatOptions(opts, type) {\n  const res = {};\n  copy(opts).to(res);\n  res.limit = opts[type + 'Limit'];\n  return res;\n}\n\nfunction extendType(original, extend) {\n  if (extend) {\n    if (!Array.isArray(extend)) {\n      extend = [extend];\n    }\n\n    extend.forEach(function(extend) {\n      original.push(extend);\n    });\n  }\n}\n\nfunction checkEnable(types, type) {\n  return types.includes(type);\n}\n\nfunction isTypes(contentTypeValue, types) {\n  if (typeof contentTypeValue === 'string') {\n    // trim extra semicolon\n    contentTypeValue = contentTypeValue.replace(/;$/, '');\n  }\n\n  return typeis.is(contentTypeValue, types);\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAS,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI,EAAE;EAC9BA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,MAAM;IAACC;EAAU,CAAC,GAAGD,IAAI;EACzB,MAAM;IAACE;EAAO,CAAC,GAAGF,IAAI;EAEtB,MAAMG,WAAW,GAAGH,IAAI,CAACG,WAAW,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;EACxD,MAAMC,UAAU,GAAGC,WAAW,CAACF,WAAW,EAAE,MAAM,CAAC;EACnD,MAAMG,UAAU,GAAGD,WAAW,CAACF,WAAW,EAAE,MAAM,CAAC;EACnD,MAAMI,UAAU,GAAGF,WAAW,CAACF,WAAW,EAAE,MAAM,CAAC;EACnD,MAAMK,SAAS,GAAGH,WAAW,CAACF,WAAW,EAAE,KAAK,CAAC;EAEjDH,IAAI,CAACC,UAAU,GAAGQ,SAAS;EAC3BT,IAAI,CAACE,OAAO,GAAGO,SAAS,CAAC,CAAC;;EAE1B;EACAT,IAAI,CAACU,aAAa,GAAG,IAAI;;EAEzB;EACA,MAAMC,SAAS,GAAG,CAChB,kBAAkB,EAClB,6BAA6B,EAC7B,0BAA0B,EAC1B,wBAAwB,EACxB,uBAAuB,CACxB;;EAED;EACA,MAAMC,SAAS,GAAG,CAAC,mCAAmC,CAAC;;EAEvD;EACA,MAAMC,SAAS,GAAG,CAAC,YAAY,CAAC;;EAEhC;EACA,MAAMC,QAAQ,GAAG,CAAC,UAAU,EAAE,iBAAiB,CAAC;EAEhD,MAAMC,QAAQ,GAAGC,aAAa,CAAChB,IAAI,EAAE,MAAM,CAAC;EAC5C,MAAMiB,QAAQ,GAAGD,aAAa,CAAChB,IAAI,EAAE,MAAM,CAAC;EAC5C,MAAMkB,QAAQ,GAAGF,aAAa,CAAChB,IAAI,EAAE,MAAM,CAAC;EAC5C,MAAMmB,OAAO,GAAGH,aAAa,CAAChB,IAAI,EAAE,KAAK,CAAC;EAE1C,MAAMoB,WAAW,GAAGpB,IAAI,CAACoB,WAAW,IAAI,CAAC,CAAC;EAE1CC,UAAU,CAACV,SAAS,EAAES,WAAW,CAACE,IAAI,CAAC;EACvCD,UAAU,CAACT,SAAS,EAAEQ,WAAW,CAACG,IAAI,CAAC;EACvCF,UAAU,CAACR,SAAS,EAAEO,WAAW,CAACI,IAAI,CAAC;EACvCH,UAAU,CAACP,QAAQ,EAAEM,WAAW,CAACK,GAAG,CAAC;;EAErC;EACA,OAAO,eAAeC,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAE;IAC1C,IAAID,GAAG,CAACE,OAAO,CAACC,IAAI,KAAKrB,SAAS,IAAIkB,GAAG,CAACI,iBAAiB,EACzD,OAAO,MAAMH,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI;MACF,MAAMI,GAAG,GAAG,MAAMC,SAAS,CAACN,GAAG,CAAC;MAChCA,GAAG,CAACE,OAAO,CAACC,IAAI,GAAG,QAAQ,IAAIE,GAAG,GAAGA,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC;MACpD,IAAIP,GAAG,CAACE,OAAO,CAACM,OAAO,KAAK1B,SAAS,EAAEkB,GAAG,CAACE,OAAO,CAACM,OAAO,GAAGH,GAAG,CAACI,GAAG;IACtE,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAInC,OAAO,EAAE;QACXA,OAAO,CAACmC,GAAG,EAAEV,GAAG,CAAC;MACnB,CAAC,MAAM;QACL,MAAMU,GAAG;MACX;IACF;IAEA,MAAMT,IAAI,CAAC,CAAC;EACd,CAAC;EAED,eAAeK,SAASA,CAACN,GAAG,EAAE;IAC5B,IACErB,UAAU,KACRL,UAAU,IAAIA,UAAU,CAAC0B,GAAG,CAAC,IAC7BW,OAAO,CAACX,GAAG,CAACE,OAAO,CAACU,GAAG,CAAC,cAAc,CAAC,EAAE5B,SAAS,CAAC,CAAC,EACtD;MACA,OAAO,MAAMjB,KAAK,CAAC4B,IAAI,CAACK,GAAG,EAAEZ,QAAQ,CAAC,CAAC,CAAC;IAC1C;IAEA,IAAIX,UAAU,IAAIuB,GAAG,CAACE,OAAO,CAACW,EAAE,CAAC5B,SAAS,CAAC,EAAE;MAC3C,OAAO,MAAMlB,KAAK,CAAC6B,IAAI,CAACI,GAAG,EAAEV,QAAQ,CAAC,CAAC,CAAC;IAC1C;IAEA,IAAIV,UAAU,IAAIoB,GAAG,CAACE,OAAO,CAACW,EAAE,CAAC3B,SAAS,CAAC,EAAE;MAC3C,OAAO,CAAC,MAAMnB,KAAK,CAAC8B,IAAI,CAACG,GAAG,EAAET,QAAQ,CAAC,KAAK,EAAE;IAChD;IAEA,IAAIV,SAAS,IAAImB,GAAG,CAACE,OAAO,CAACW,EAAE,CAAC1B,QAAQ,CAAC,EAAE;MACzC,OAAO,CAAC,MAAMpB,KAAK,CAAC8B,IAAI,CAACG,GAAG,EAAER,OAAO,CAAC,KAAK,EAAE;IAC/C;IAEA,OAAO,CAAC,CAAC;EACX;AACF,CAAC;AAED,SAASH,aAAaA,CAAChB,IAAI,EAAEyC,IAAI,EAAE;EACjC,MAAMT,GAAG,GAAG,CAAC,CAAC;EACdpC,IAAI,CAACI,IAAI,CAAC,CAAC0C,EAAE,CAACV,GAAG,CAAC;EAClBA,GAAG,CAACW,KAAK,GAAG3C,IAAI,CAACyC,IAAI,GAAG,OAAO,CAAC;EAChC,OAAOT,GAAG;AACZ;AAEA,SAASX,UAAUA,CAACuB,QAAQ,EAAEC,MAAM,EAAE;EACpC,IAAIA,MAAM,EAAE;IACV,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;MAC1BA,MAAM,GAAG,CAACA,MAAM,CAAC;IACnB;IAEAA,MAAM,CAACG,OAAO,CAAC,UAASH,MAAM,EAAE;MAC9BD,QAAQ,CAACK,IAAI,CAACJ,MAAM,CAAC;IACvB,CAAC,CAAC;EACJ;AACF;AAEA,SAASxC,WAAWA,CAAC6C,KAAK,EAAET,IAAI,EAAE;EAChC,OAAOS,KAAK,CAACC,QAAQ,CAACV,IAAI,CAAC;AAC7B;AAEA,SAASH,OAAOA,CAACc,gBAAgB,EAAEF,KAAK,EAAE;EACxC,IAAI,OAAOE,gBAAgB,KAAK,QAAQ,EAAE;IACxC;IACAA,gBAAgB,GAAGA,gBAAgB,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACvD;EAEA,OAAOxD,MAAM,CAAC2C,EAAE,CAACY,gBAAgB,EAAEF,KAAK,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"// routes.ts\n\nimport Router from '@koa/router';\nimport { z } from 'zod';\nimport { UserModel } from './models';\nimport { userZodSchema } from './types';\nconst bcrypt = require('bcrypt');\nconst router = new Router();\nexport default router;\nrouter.get('/user/:nickname', async (ctx, next) => {\n  const paramparse = z.object({\n    nickname: z.string()\n  }).safeParse(ctx.params);\n  const bodyparse = userZodSchema.safeParse(ctx.request.body);\n  ctx.assert(paramparse.success, 400);\n  ctx.assert(bodyparse.data, 400);\n  const found = await UserModel.findOne({\n    nickname: paramparse.data.nickname\n  }).lean().exec();\n  ctx.assert(found, 404);\n  const validPassword = await bcrypt.compare(bodyparse.data.password, found.password);\n  ctx.assert(validPassword, 400);\n  ctx.status = 200;\n  ctx.body = found;\n  ctx.body = `${found.email}`;\n  await next();\n});\nrouter.post('/join', async (ctx, next) => {\n  const bodyparse = userZodSchema.safeParse(ctx.request.body);\n  ctx.assert(bodyparse.success, 400);\n  const found = await UserModel.findOne({\n    nickname: bodyparse.data.nickname\n  }).lean().exec();\n  ctx.assert(found === null, 409);\n  bodyparse.data.password = await bcrypt.hash(bodyparse.data.password, 10);\n  const model = new UserModel(bodyparse.data);\n  await model.save();\n  ctx.status = 201;\n  await next();\n});\nrouter.delete('/user/:nickname', async (ctx, next) => {\n  const paramparse = z.object({\n    nickname: z.string()\n  }).safeParse(ctx.params);\n  ctx.assert(paramparse.success, 400);\n  const document = await UserModel.findOne({\n    nickname: paramparse.data.nickname\n  }).exec();\n  ctx.assert(document, 404);\n  await document.deleteOne();\n  ctx.status = 200; // maybe 204\n\n  await next();\n});\nrouter.patch('/user/:nickname', async (ctx, next) => {\n  const paramparse = z.object({\n    nickname: z.string()\n  }).safeParse(ctx.params);\n  ctx.assert(paramparse.success, 400);\n  const bodyparse = z.object({\n    password: z.string(),\n    email: z.string()\n  }).safeParse(ctx.request.body);\n  ctx.assert(bodyparse.success, 400);\n  const document = await UserModel.findOne({\n    nickname: paramparse.data.nickname\n  }).exec();\n  ctx.assert(document, 404);\n  await document.updateOne({\n    ...paramparse.data,\n    ...bodyparse.data\n  });\n  ctx.status = 200; // maybe 204\n\n  await next();\n});","map":{"version":3,"names":["Router","z","UserModel","userZodSchema","bcrypt","require","router","get","ctx","next","paramparse","object","nickname","string","safeParse","params","bodyparse","request","body","assert","success","data","found","findOne","lean","exec","validPassword","compare","password","status","email","post","hash","model","save","delete","document","deleteOne","patch","updateOne"],"sources":["C:/Users/ytBad/OneDrive/바탕 화면/all/project/my-app/src/route.ts"],"sourcesContent":["// routes.ts\r\n\r\nimport Router from '@koa/router'\r\nimport { Next, ParameterizedContext } from 'koa'\r\nimport { z } from 'zod'\r\nimport { UserModel } from './models'\r\nimport { User, userZodSchema, State } from './types'\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst router = new Router<State>()\r\n\r\nexport default router\r\n\r\nrouter.get('/user/:nickname', async (ctx: ParameterizedContext<State>, next: Next) => {\r\n    const paramparse = z.object({ nickname: z.string() }).safeParse(ctx.params)\r\n    const bodyparse = userZodSchema.safeParse(ctx.request.body)\r\n    ctx.assert(paramparse.success, 400)\r\n    ctx.assert(bodyparse.data, 400)\r\n\r\n    const found = await UserModel.findOne({ nickname: paramparse.data.nickname }).lean().exec()\r\n\r\n    ctx.assert(found, 404)\r\n\r\n    const validPassword = await bcrypt.compare(bodyparse.data.password, found.password);\r\n    ctx.assert(validPassword, 400)\r\n\r\n    ctx.status = 200\r\n    ctx.body = found\r\n    ctx.body = `${found.email}`\r\n    await next()\r\n})\r\n\r\nrouter.post('/join', async (ctx: ParameterizedContext<State>, next: Next) => {\r\n    const bodyparse = userZodSchema.safeParse(ctx.request.body)\r\n    ctx.assert(bodyparse.success, 400)\r\n\r\n    const found = await UserModel.findOne({ nickname: bodyparse.data.nickname }).lean().exec()\r\n    ctx.assert(found === null, 409)\r\n\r\n    bodyparse.data.password = await bcrypt.hash(bodyparse.data.password, 10);\r\n    const model = new UserModel(bodyparse.data)\r\n    await model.save()\r\n\r\n    ctx.status = 201\r\n\r\n    await next()\r\n})\r\n\r\nrouter.delete('/user/:nickname', async (ctx: ParameterizedContext<State>, next: Next) => {\r\n    const paramparse = z.object({ nickname: z.string() }).safeParse(ctx.params)\r\n    ctx.assert(paramparse.success, 400)\r\n    const document = await UserModel.findOne({ nickname: paramparse.data.nickname }).exec()\r\n    ctx.assert(document, 404)\r\n\r\n    await document.deleteOne()\r\n\r\n    ctx.status = 200 // maybe 204\r\n\r\n    await next()\r\n})\r\n\r\nrouter.patch('/user/:nickname', async (ctx: ParameterizedContext<State>, next: Next) => {\r\n    const paramparse = z.object({ nickname: z.string() }).safeParse(ctx.params)\r\n    ctx.assert(paramparse.success, 400)\r\n    const bodyparse = z.object({ password: z.string(), email: z.string() }).safeParse(ctx.request.body)\r\n    ctx.assert(bodyparse.success, 400)\r\n\r\n    const document = await UserModel.findOne({ nickname: paramparse.data.nickname }).exec()\r\n    ctx.assert(document, 404)\r\n\r\n    await document.updateOne({\r\n    ...paramparse.data,\r\n    ...bodyparse.data\r\n    })\r\n\r\n    ctx.status = 200 // maybe 204\r\n\r\n    await next()\r\n})  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n * Module dependencies.\n */\n'use strict';\n\nconst Counter = require('passthrough-counter');\nconst humanize = require('humanize-number');\nconst bytes = require('bytes');\nconst chalk = require('chalk');\nconst util = require('util');\n\n/**\n * Expose logger.\n */\n\nmodule.exports = dev;\n\n/**\n * Color map.\n */\n\nconst colorCodes = {\n  7: 'magenta',\n  5: 'red',\n  4: 'yellow',\n  3: 'cyan',\n  2: 'green',\n  1: 'green',\n  0: 'yellow'\n};\n\n/**\n * Development logger.\n */\n\nfunction dev(opts) {\n  // print to console helper.\n  const print = function () {\n    let transporter;\n    if (typeof opts === 'function') {\n      transporter = opts;\n    } else if (opts && opts.transporter) {\n      transporter = opts.transporter;\n    }\n    return function printFunc(...args) {\n      const str = util.format(...args);\n      if (transporter) {\n        transporter(str, args);\n      } else {\n        console.log(...args);\n      }\n    };\n  }();\n  return async function logger(ctx, next) {\n    // request\n    const start = ctx[Symbol.for('request-received.startTime')] ? ctx[Symbol.for('request-received.startTime')].getTime() : Date.now();\n    print('  ' + chalk.gray('<--') + ' ' + chalk.bold('%s') + ' ' + chalk.gray('%s'), ctx.method, ctx.originalUrl);\n    try {\n      await next();\n    } catch (err) {\n      // log uncaught downstream errors\n      log(print, ctx, start, null, err);\n      throw err;\n    }\n\n    // calculate the length of a streaming response\n    // by intercepting the stream with a counter.\n    // only necessary if a content-length header is currently not set.\n    const length = ctx.response.length;\n    const body = ctx.body;\n    let counter;\n    if (length == null && body && body.readable) {\n      ctx.body = body.pipe(counter = Counter()).on('error', ctx.onerror);\n    }\n\n    // log when the response is finished or closed,\n    // whichever happens first.\n    const res = ctx.res;\n    const onfinish = done.bind(null, 'finish');\n    const onclose = done.bind(null, 'close');\n    res.once('finish', onfinish);\n    res.once('close', onclose);\n    function done(event) {\n      res.removeListener('finish', onfinish);\n      res.removeListener('close', onclose);\n      log(print, ctx, start, counter ? counter.length : length, null, event);\n    }\n  };\n}\n\n/**\n * Log helper.\n */\n\nfunction log(print, ctx, start, len, err, event) {\n  // get the status code of the response\n  const status = err ? err.isBoom ? err.output.statusCode : err.status || 500 : ctx.status || 404;\n\n  // set the color of the status code;\n  const s = status / 100 | 0;\n  // eslint-disable-next-line\n  const color = colorCodes.hasOwnProperty(s) ? colorCodes[s] : colorCodes[0];\n\n  // get the human readable response length\n  let length;\n  if (~[204, 205, 304].indexOf(status)) {\n    length = '';\n  } else if (len == null) {\n    length = '-';\n  } else {\n    length = bytes(len).toLowerCase();\n  }\n  const upstream = err ? chalk.red('xxx') : event === 'close' ? chalk.yellow('-x-') : chalk.gray('-->');\n  print('  ' + upstream + ' ' + chalk.bold('%s') + ' ' + chalk.gray('%s') + ' ' + chalk[color]('%s') + ' ' + chalk.gray('%s') + ' ' + chalk.gray('%s'), ctx.method, ctx.originalUrl, status, time(start), length);\n}\n\n/**\n * Show the response time in a human readable format.\n * In milliseconds if less than 10 seconds,\n * in seconds otherwise.\n */\n\nfunction time(start) {\n  const delta = Date.now() - start;\n  return humanize(delta < 10000 ? delta + 'ms' : Math.round(delta / 1000) + 's');\n}","map":{"version":3,"names":["Counter","require","humanize","bytes","chalk","util","module","exports","dev","colorCodes","opts","print","transporter","printFunc","args","str","format","console","log","logger","ctx","next","start","Symbol","for","getTime","Date","now","gray","bold","method","originalUrl","err","length","response","body","counter","readable","pipe","on","onerror","res","onfinish","done","bind","onclose","once","event","removeListener","len","status","isBoom","output","statusCode","s","color","hasOwnProperty","indexOf","toLowerCase","upstream","red","yellow","time","delta","Math","round"],"sources":["C:/Users/ytBad/OneDrive/바탕 화면/all/project/my-app/node_modules/koa-logger/index.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n'use strict'\n\nconst Counter = require('passthrough-counter')\nconst humanize = require('humanize-number')\nconst bytes = require('bytes')\nconst chalk = require('chalk')\nconst util = require('util')\n\n/**\n * Expose logger.\n */\n\nmodule.exports = dev\n\n/**\n * Color map.\n */\n\nconst colorCodes = {\n  7: 'magenta',\n  5: 'red',\n  4: 'yellow',\n  3: 'cyan',\n  2: 'green',\n  1: 'green',\n  0: 'yellow'\n}\n\n/**\n * Development logger.\n */\n\nfunction dev (opts) {\n  // print to console helper.\n  const print = (function () {\n    let transporter\n    if (typeof opts === 'function') {\n      transporter = opts\n    } else if (opts && opts.transporter) {\n      transporter = opts.transporter\n    }\n\n    return function printFunc (...args) {\n      const str = util.format(...args)\n      if (transporter) {\n        transporter(str, args)\n      } else {\n        console.log(...args)\n      }\n    }\n  }())\n\n  return async function logger (ctx, next) {\n    // request\n    const start = ctx[Symbol.for('request-received.startTime')] ? ctx[Symbol.for('request-received.startTime')].getTime() : Date.now()\n    print('  ' + chalk.gray('<--') +\n      ' ' + chalk.bold('%s') +\n      ' ' + chalk.gray('%s'),\n    ctx.method,\n    ctx.originalUrl)\n\n    try {\n      await next()\n    } catch (err) {\n      // log uncaught downstream errors\n      log(print, ctx, start, null, err)\n      throw err\n    }\n\n    // calculate the length of a streaming response\n    // by intercepting the stream with a counter.\n    // only necessary if a content-length header is currently not set.\n    const length = ctx.response.length\n    const body = ctx.body\n    let counter\n    if (length == null && body && body.readable) {\n      ctx.body = body\n        .pipe(counter = Counter())\n        .on('error', ctx.onerror)\n    }\n\n    // log when the response is finished or closed,\n    // whichever happens first.\n    const res = ctx.res\n\n    const onfinish = done.bind(null, 'finish')\n    const onclose = done.bind(null, 'close')\n\n    res.once('finish', onfinish)\n    res.once('close', onclose)\n\n    function done (event) {\n      res.removeListener('finish', onfinish)\n      res.removeListener('close', onclose)\n      log(print, ctx, start, counter ? counter.length : length, null, event)\n    }\n  }\n}\n\n/**\n * Log helper.\n */\n\nfunction log (print, ctx, start, len, err, event) {\n  // get the status code of the response\n  const status = err\n    ? (err.isBoom ? err.output.statusCode : err.status || 500)\n    : (ctx.status || 404)\n\n  // set the color of the status code;\n  const s = status / 100 | 0\n  // eslint-disable-next-line\n  const color = colorCodes.hasOwnProperty(s) ? colorCodes[s] : colorCodes[0]\n\n  // get the human readable response length\n  let length\n  if (~[204, 205, 304].indexOf(status)) {\n    length = ''\n  } else if (len == null) {\n    length = '-'\n  } else {\n    length = bytes(len).toLowerCase()\n  }\n\n  const upstream = err ? chalk.red('xxx')\n    : event === 'close' ? chalk.yellow('-x-')\n      : chalk.gray('-->')\n\n  print('  ' + upstream +\n    ' ' + chalk.bold('%s') +\n    ' ' + chalk.gray('%s') +\n    ' ' + chalk[color]('%s') +\n    ' ' + chalk.gray('%s') +\n    ' ' + chalk.gray('%s'),\n  ctx.method,\n  ctx.originalUrl,\n  status,\n  time(start),\n  length)\n}\n\n/**\n * Show the response time in a human readable format.\n * In milliseconds if less than 10 seconds,\n * in seconds otherwise.\n */\n\nfunction time (start) {\n  const delta = Date.now() - start\n  return humanize(delta < 10000\n    ? delta + 'ms'\n    : Math.round(delta / 1000) + 's')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}